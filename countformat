/*******************************************************************************
 * This script creates a 'Format Count' menu to the right of the Help Menu,
 * presenting options for totaling the number of formatted cells in a named
 * range.                                                                     
   answerRange:       named range that corresponds to answer space            */
   var answerRange    = 'answers';

/* countFormat totals the number of cells that are bold, strikethrough, italics,
 * or a background color (in hex, with leading #).
   tallyRange:        named range of 1 cell; where tally is put               */
   var tallyRange     = 'tally';
 
/* countClaims totals the number of claimed and written questions based on the
 * background color of the cells and the bold state.
 * Anyone, even Chris Ray, will have to adjust if their answer sheet is not as:
 * Packet 1 TU - Packet 1 B - Packet 2 TU - Packet 2 B - Packet 3 TU - etc.
 * The following should be 1-column named ranges.
   tagRange:          background colors of cells in this range are used to
                      determine claims & written; writer tags in this range are
                      used to update background colors of claimed cells
   claimRange:        where the number of claims by a writer claims is put
   writtenTURange:    where the number of written tossups by a writer is put
   writtenBRange:     where the number of written bonuses by a writer is put  */
   var tagRange       = 'tags';
   var claimTURange   = 'claimTU';
   var claimBRange    = 'claimB';
   var writtenTURange = 'writtenTU';
   var writtenBRange  = 'writtenB';
/******************************************************************************/
function onOpen(e) {
  var ui = SpreadsheetApp.getUi();
  ui.createMenu('Format Count')
    .addItem('Bold', 'countBold')
    .addItem('Strikethrough', 'countStrike')
    .addItem('Italics', 'countItalic')
    .addItem('By Color', 'countColor')
    .addSeparator()
    .addItem('Claims & Written', 'countClaim')
    .addToUi(); }

function countBold() {
  countFormat("bold"); }

function countStrike() {
  countFormat("strike"); }

function countItalic() {
  countFormat("italic"); }

function countColor() {
  var ui = SpreadsheetApp.getUi();
  var box = ui.prompt('Enter hex code, with leading #:',ui.ButtonSet.OK_CANCEL);
  var button = box.getSelectedButton();
  var color = box.getResponseText();
  if (button == ui.Button.OK) {
    countFormat("background", color); } }

function countFormat (test, opt_color) {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var cells = ss.getRangeByName(answerRange);
  var tally = ss.getRangeByName(tallyRange);
  
  var testCase = test;
  switch (test) {
    case "strike":
      var rangeFormat = cells.getFontLines();
      testCase = "line-through";
      break;
    case "background":
      var rangeFormat = cells.getBackgrounds();
      testCase = opt_color;
      break;
    case "italic":
      var rangeFormat = cells.getFontStyles();
      break;
    case "bold":
      var rangeFormat = cells.getFontWeights();
      break;
    default:
      throw ("invalid format"); }
  
  var total = 0;
  for(var p in rangeFormat) {
    for(var q in rangeFormat[p]) {
      if(rangeFormat[p][q] == testCase) {
        total += 1; } } }
  
  tally.setValue(total); }

function countClaim() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var cells = ss.getRangeByName(answerRange);
  var tags = ss.getRangeByName(tagRange);
  var claimTU = ss.getRangeByName(claimTURange);
  var claimB = ss.getRangeByName(claimBRange);
  var writtenTU = ss.getRangeByName(writtenTURange);
  var writtenB = ss.getRangeByName(writtenBRange);
  var cellBackgrounds = cells.getBackgrounds();
  var cellBold = cells.getFontWeights();
  var cellValues = cells.getValues();
  var tagColors = tags.getBackgrounds();
  var tagValues = tags.getValues();
  var claimTUTotal = 0, claimBTotal = 0, writtenTUTotal = 0, writtenBTotal = 0;
  
  for(var m in tagColors) {
    for(var p in cellBackgrounds) {
      for(var q in cellBackgrounds[p]) {
        if(tagValues[m][0].toString().length > 0) {
          if(cellValues[p][q].toString().indexOf(tagValues[m][0].toString()) > -1) {
            cellBackgrounds[p][q] = tagColors[m][0] } }
        if(cellBackgrounds[p][q] == tagColors[m][0]) {
          if(p % 2 == 0 || p == 0) {
            claimTUTotal += 1; }
          else {
            claimBTotal +=1; }
          if(cellBold[p][q] == "bold") {
            if(p % 2 == 0 || p == 0) {
            /* Uncomment below and comment above line if you have TU & B
               in alternating columns instead of alternating rows */
            /*if(q % 2 == 0 || q == 0) {*/
              writtenTUTotal += 1; }
            else {
              writtenBTotal += 1; } } } } }
    claimTU.getCell(+m+1,1).setValue(claimTUTotal);
    claimB.getCell(+m+1,1).setValue(claimBTotal);
    writtenTU.getCell(+m+1,1).setValue(writtenTUTotal);
    writtenB.getCell(+m+1,1).setValue(writtenBTotal);
    claimTUTotal = claimBTotal = writtenTUTotal = writtenBTotal = 0; }

  cells.setBackgrounds(cellBackgrounds); }
